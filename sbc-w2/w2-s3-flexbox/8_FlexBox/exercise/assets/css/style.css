/* General styling */
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
  text-align: center;
  background-color: #f4f4f4;
}

header {
  background-color: #333;
  color: white;
  padding: 20px 0;
}

/* Flexbox navigation */
.navbar {
  /* TODO: explain the purpose of the following properties */

  display: flex; /* Enables a flex state for its direct children */
  justify-content: center; /* Centres the content */
  background-color: #007bff;
  padding: 10px;
}

.navbar a {
  color: white;
  padding: 10px 20px;
  text-decoration: none;
  text-transform: uppercase;
  font-weight: bold;
}

.navbar a:hover {
  background-color: #0056b3;
}

/* Flexbox content area */
.content {
  /* TODO: explain the purpose of the following properties */
  flex-wrap: wrap; /* When the content runs out of room this property wraps the content onto a new line */
  display: flex; /* Enables a flex state for its direct children */

  justify-content: space-around;
  align-items: center;
  margin: 20px auto;
  padding: 20px;
  background-color: white;
  max-width: 1200px;
}

/* Flexbox items */
.box {
  background-color: #28a745;
  color: white;
  padding: 20px;
  margin: 10px;
  text-align: center;
  border-radius: 5px;

  /* TODO: explain the purpose of the following properties */
  flex: 1 1 200px;
  /* This is the shorthand for flex-grow, flex-shrink and flex-basis combined. */

  /* Flex grow: This defines the ability for a flex item to grow if necessary. It accepts a unitless value that serves as a proportion. It dictates what amount of the available space inside the flex container the item should take up.
  If all items have flex-grow set to 1, the remaining space in the container will be distributed equally to all children. If one of the children has a value of 2, that child would take up twice as much of the space as either one of the others (or it will try, at least) */

  /* Flex shrink: Defines the ability for a flex item to shrink if necessary */

  /* Flex basis: This defines the default size of an element before the remaining space is distributed. It can be a length (e.g. 20%, 5rem, etc.) or a keyword. The auto keyword means “look at my width or height property” (which was temporarily done by the main-size keyword until deprecated). The content keyword means “size it based on the item’s content” – this keyword isn’t well supported yet, so it’s hard to test and harder to know what its brethren max-content, min-content, and fit-content do. */
}

.box:hover {
  background-color: #218838;
}

/* Footer styling */
footer {
  background-color: #333;
  color: white;
  padding: 20px 0;
  margin-top: 20px;
}
